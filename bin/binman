#!/usr/bin/env ruby
=begin =======================================================================

# BINMAN 1 2016-02-13 5.0.1

## NAME

binman - manpages from header comments

## SYNOPSIS

`binman` [*OPTION*]... *COMMAND*

## DESCRIPTION

[binman] generates manual pages from header comments in your scripts.  It can
extract their embedded manpage sources (described below), convert them from
md2man(5) into roff(7) and HTML using [md2man], and display them using man(1).

### Embedded manpage sources

An "embedded manpage source" is an md2man(5) document that is embedded in your
script, typically inside a multi-line block comment or "here document"; or in
a header comment composed of single-line comments near the top of your script.

#### In multi-line comments

In the former case, where it's possible to write a freeform block of text, the
embedded manpage source must be delimited by `=begin` and `=end` lines, which
start with their respective delimiters and, optionally, continue with a single
space followed by any amount and kind of characters until the end of line.

To illustrate, here is the simplest case:

    =begin
    This is an embedded manpage source!
    =end

Next, we can add decorations after the delimiters:

    =begin \\\\\\\\\\\\\\\\\\\\\\\\\\\\
    This is an embedded manpage source!
    =end //////////////////////////////

Similarly, using different characters this time:

    =begin abcdefghijklmnopqrstuvwxyz'"
    This is an embedded manpage source!
    =end 0123456789!@#$%^&*()=+-_:;,\/?

#### In single-line comments

In the latter case, the embedded manpage source is expected to be found in a
contiguous block of single-line comments that begins at the top of the script
(optionally after a `#!` line, `coding:` line, and any number of blank lines)
and ends at the first blank line.  Each single-line comment inside this block
must begin with a `#` character and may, optionally, continue with a single
space followed by any amount and kind of characters until the end of line.

To illustrate, here is the simplest case:

    # This is an embedded manpage source!

Next, we can add a `#!` line at the top:

    #!/bin/sh
    # This is an embedded manpage source!

Next, we can add a `coding:` line after `#!`:

    #!/bin/sh
    # coding: utf-8
    # This is an embedded manpage source!

Or, using the Emacs coding system syntax:

    #!/bin/sh
    # -*- encoding: utf-8 -*-
    # This is an embedded manpage source!

Next, we can add blank lines between them:

    #!/bin/sh
    # coding: utf-8

    # This is an embedded manpage source!

Here is another permutation of the above:

    #!/bin/sh

    # This is an embedded manpage source!

## OPTIONS

`-h` [*PATTERN*], `--help` [*PATTERN*]
  Show this help manual and search for *PATTERN* regular expression therein.

## COMMANDS

`text` [*FILE*]
  Print the embedded manpage source extracted from the given *FILE* or STDIN.

`roff` [*FILE*]
  Print the roff(7) conversion of the embedded manpage source extracted from
  the given *FILE* or STDIN.

`html` [*FILE*]
  Print the HTML conversion of the embedded manpage source extracted from
  the given *FILE* or STDIN.

`show` [*FILE*] [*PATTERN*]
  Use man(1) to display the roff(7) conversion of the embedded manpage source
  extracted from the given *FILE* or STDIN.  If *PATTERN* is given, search for
  it within the output displayed by man(1) and jump to first match if found.
  If man(1) cannot display the roff(1) conversion, fall back to the showing
  the HTML conversion; if that fails too, display the extracted text as-is.

`help` *FILE* ... [`-h`|`--help` [*PATTERN*]] ... [`--`] ...
  If the given argument sequence contains `-h` or `--help`, except after
  `--`, optionally followed by a *PATTERN* regular expression that specifies
  text to search for and, if found, jump to inside the displayed man page,
  then this program extracts the given *FILE*'s embedded manpage source,
  converts it into roff(7), displays it using man(1), and finally exits with
  status code `0`.  Otherwise, this program exits with status code `111`.

## SEE ALSO

binman-rake(1), man(1), md2man(5), roff(7), markdown(7)

[binman]: https://github.com/sunaku/binman
[md2man]: https://github.com/sunaku/md2man
[Redcarpet]: https://github.com/vmg/redcarpet

=end =========================================================================

require 'binman'

command, source = ARGV

if command == 'help'
  BinMan.help source, ARGV[2..-1]
  exit 111
else
  BinMan.help
  source ||= STDIN
  case command
  when 'show'
    BinMan.send(command, source)
  when 'text', 'roff', 'html'
    puts BinMan.send(command, source)
  else
    warn 'binman: invalid command; try --help'
    exit 1
  end
end
